ggplot(midwest, aes(x = poptotal, y = poppovertyknown, color = state)) + geom_point(size=4) + scale_color_brewer(palette = 'Accent')
# Scatter plot of total population versus known poverty population
ggplot(midwest, aes(x = poptotal, y = poppovertyknown, color = state)) + geom_point(size=2) + scale_color_brewer(palette = 'Accent')
# Scatter plot of total population versus known poverty population
ggplot(midwest, aes(x = poptotal, y = poppovertyknown, color = state)) + geom_point(size=5) + scale_color_brewer(palette = 'Accent')
load("//var/www/example.com/public_html/Data-Science-All/workspace.RData")
load("//var/www/example.com/public_html/Data-Science-All/workspace.RData")
install.packages("sbtools")
install.packages("dataRetrieval")
sbtools?
2
?sbtools
??sbtools
install.packages("dataRetrieval")
install.packages("sf")
install.packages(c("dataRetrieval", "sf"))
??dataRetrieval
??data
??ggplot
?ggplot
?sbtools
getRversion()
getRversion()
letters
LETTERS
months()
?months()
?months('Date')
months('Date')
months
months.Date()
numeric(3)
numeric(3,1)
x <- c(9,5,7)
y <- c(2)
x + y
help.start("Introduction to R")
help.start()
help.search("hist")
## 1c) Vignettes for GSTAT
vignette(GSTAT, package = NULL, lib.loc = NULL, all = TRUE)
## 1c) Vignettes for GSTAT
vignette(GSTAT)
## 1c) Vignettes for GSTAT
vignette("GSTAT")
## 1c) Vignettes for GSTAT
vignette(gstat)
install.packages("gstat")
vignette(gstat)
library("gstat", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
vignette(gstat)
vignette(gstat)
vignette(gstat)
vignette('gstat')
vignette('gstat', package = NULL, lib.loc = NULL, all = TRUE)
vignette('gstat', package = NULL, lib.loc = NULL, all = FALSE)
vignette(package = "gstat")
vignette(package = "intro_sp")
install.packages("intro_sp")
install.packages("intro_sp")
library("sp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("sp")
vignette(package = "sp")
# ===================================Vignettes in package ‘sp’:====================
vignette("intro_sp", package = "sp", lib.loc = NULL, all = TRUE)
## 1a) Start search
help.start()
test <- data.frame(id = letters[5:10], x = 5:10, y = 15:20)
View(test)
x <- factor(c("yes", "no", "no", "yes", "yes"))
str(x)
class(x)
help("runif")
help("runif()")
help("runif")
a <- runif(100)
a
mean(a)
min(a)
max(a)
a[0.001897403]
a(0.001897403
)
position(0.001897403)
match(0.001897403, x)
which(x == 0.001897403)
b <- runif(1000, min=0, max=100)
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random numbers between 0 & 100
hist(a,b)
hist(b,a)
help("hist")
hist(a)
hist(b)
hist(a), breaks = 12, col = "blue", border = "white")
hist(a, breaks = 12, col = "blue", border = "white")
hist(a, col = "blue", border = "white")
hist(a, col = "blue", border = "white")
hist(a, col = "red", border = "white")
hist(a)
hist(a, col = "red", border = "white")
hist(a, col = "red", border = "white", title="Histogram of A")
hist(a, col = "red", border = "white", title("Histogram of A"))
hist(a, col = "red", border = "white", title("Histogram of A"))
op <- par(mfrow = c(2, 2))
hist(islands)
utils::str(hist(islands, col = "gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col = "lightblue", border = "pink")
##-- For non-equidistant breaks, counts should NOT be graphed unscaled:
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),
col = "blue1")
text(r$mids, r$density, r$counts, adj = c(.5, -.5), col = "blue3")
sapply(r[2:3], sum)
sum(r$density * diff(r$breaks)) # == 1
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
par(op)
hist(a, col = "red", border = "white")
hist(b, col = "blue", border = "white")
hist(a, col = "red", border = "white")
hist(b, col = "blue", border = "white")
hist(a, col = "red", border = "white")
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
plot(p1, p2)
par(mfrow=c(2,1))
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
layout(matrix(c(1,2), 2, 2, byrow = TRUE))
layout(matrix(c(1,2), p1, p2, byrow = TRUE))
par(mfrow=c(2,1))
p1 <- hist(a, col = "red", border = "white")
par(mfrow=c(2,2))
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
par(mfrow=c(1,1))
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
par(mfrow=c(1,2))
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
par(mfrow=c(1,2))
p2 <- hist(b, col = "blue", border = "white")
p1 <- hist(a, col = "red", border = "white")
a <- runif(100) # 100 random numbers
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random numbers between 0 & 100
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
grid.arrange(p1, p2, nrow = 1)
library(gridExtra)
grid.arrange(p1, p2, nrow = 1)
grid.arrange(p1, p2, nrow = 1)
grid.arrange(p1, p2, ncol = 1)
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
p2 <- hist(b, col = "blue", border = "white")
p2 <- hist(b, col = "blue", border = "white")
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
## 1a) Start search
help.start()
## 1b) Search for "hist" help.
help.search("hist")
install.packages("gstat") # install gstat package
library("gstat") # Activate gstat
vignette(package = "gstat") # get vignette for gstat
vignette
vignette(st, package = "gstat")
vignette(:st", package = "gstat")
vignette("st", package = "gstat")
vignette("intro_sp", package = "sp")
?runif
a <- runif(100) # 100 random numbers
a
min(a)
max(a)
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random integers between 0 & 100
b
b <- runif(1000, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
b <- runif(100, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
class(b)
typeof(b)
b <- runif(100, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
b <- sample(0:100, 1000)
b <- sample(0:100, 100)
b
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
b <- sample(0:100, 100)
p2 <- hist(b, col = "blue", border = "white")
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random integers between 0 & 100
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
b
c <- seq(from = -100, to = 100)
c
plot(c**2) #plot(c^2) is also an alternative
plot(c**2) #plot(c^2) is also an alternative
plot(c**2, main = "Plot of c^2") #plot(c^2) is also an alternative
# 4b)
d <- seq(from = 0, to = 6, length.out = 100)
d
plot(d, sin(d)) #sinus plot
plot(d, sin(d), main = "Sinus plot of d") #sinus plot
# 4c)
e <- LETTERS #OR
e
# 4d)
f <- rep.int(1, 100)
f
# 5a)
x <- matrix(data = -99, nrow = 10, ncol = 10)
x
# 5b) 100 by 100 matrix consisting of uniformly distributed values
y <- matrix(data = runif(10000), nrow = 100, ncol = 100)
y
# 5c)
z <- y > 0.5
z
# 5d)
image(x)
image(x, title(main="Matrix x"))
image(x, title = "Matrix x")
# 5d)
image(x)
image(x, col = "green")
help(hist)
image(x, col = "green")
image(y, col = "orange")
# 5b) 100 by 100 matrix consisting of uniformly distributed values
y <- matrix(data = runif(10000), nrow = 100, ncol = 100)
image(y)
image(y, col = "orange")
help.start()
help.start()
range(a)
help(matrix)
help("array")
help(matrix)
data
diamonds
hist(diamonds$carat, diamonds$price)
hist(diamonds$carat, diamonds$x)
hist(diamonds$y, diamonds$x)
hist(diamonds$carat)
hist(diamonds$price)
hist(diamonds$price, col = "brown", border = "white")
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title="Histogram of price of diamonds")
hist(diamonds$price, col = "brown", border = "white", main = "Histogram of price of diamonds")
install.packages(c("geoR", "spatstat", "spatial", "tripack", "akima"))
library("sp") # activate spatial first
getClass("Spatial") # get "Spatial" classes
x <- runif(100, min = 4000000, max = 4010000) # intgers
y <- runif(100, min = 5205000,	max = 5205500) # integers
z <- runif(100, min = 500,	max = 600) # float
elevations <- data.frame(x,y,z) # DataFrame elevations
elevations
plot(elevations$x, elevations$y, pch=1, main = "Plot of XY coordinates", xlab = "x-coordinates", ylab = "y-coordinates", col = "blue", lwd = 1) # plots x and y of elevations as circles
hist(elevations$z, col = "gray", border = "white", main = "Histogram of z coordinates", xlab = "z-coordinates", labels = TRUE)
data("meuse") # load the meuse data from "sp" package
View(meuse)
meuse$zinc # get column zinc
mean(meuse$zinc) # get mean of zinc column
meuse[,5] # get the fifth column. [row,column]
median(meuse[,5]) # median of fifth column
meuse[30,] # get 30th row
meuse[30,] # get 30th row
c(meuse[30,]$x, meuse[30,]$y) # coordinates of 30th row
meuse[50,]$lead # lead value of the 50th row
class(meuse)
str(meuse)
summary(meuse) # main	statistical	parametersfor	every	column
summary(meuse) # main	statistical	parametersfor	every	column
length(meuse) # this means that there are 14 variables
length(meuse$zinc) # this means that there are 155 observations
class(meuse$cadmium) # class type of cadmium: numeric data of float type
names(meuse) # column	names	of the	meuse	dataset
class(meuse$soil) # class type of cadmium: factor data with three levels (1, 2 and 3)
names(meuse) # column	names	of the	meuse	dataset
meuse.spdf <- meuse # conversion of meuse to SpatialPointsDataFrame
View(meuse.spdf)
coordinates(meuse.spdf) <- c("x", "y") # x,y coordinates concantenation & becomes a class
View(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
class(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
meuse.spdf
meuse.spdf@coords
meuse.spdf@proj4string
plot(meuse.spdf, main = "SpatialPointsDataFrame")
summary(meuse.spdf) # a statistical summary
bbox(meuse.spdf) # find bounding box coordinates
proj4string(meuse.spdf) # check projection system
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
data("meuse.grid") # load "meuse.grid" data from package "sp"
class(meuse.grid)
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
meuse.grid_xy = cbind(meuse.grid$x, meuse.grid$y) # promotion to coordinates
meuse.grid_SPoints <- SpatialPoints(meuse.grid_xy) # promotion to SpatialPoints
soil <- meuse.grid$soil #selection of soil attributes to create SpatialPointsDataFrame
soil <- data.frame(soil) # conversion of soil datatype from factor to data.frame
meuse.grid_SPointDF <- SpatialPointsDataFrame(meuse.grid_SPoints, soil) # promotion to SpatialPointsDataFrame
View(soil)
class(meuse.grid_SPointDF) # confirm object class as "SpatialPointsDataFrame"
# creation of "SpatialPixelsDataFrame"
meuse.grid_SPixelDF <- SpatialPixelsDataFrame(coordinates(meuse.grid_SPointDF), data = meuse.grid) # promotion of SpatialPointsDataFrame
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
plot(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (plot)", col = rainbow(12)) # plot
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
spplot(meuse.grid_SPixelDF) # spplot
data(wrld_simpl)
data("wrld_simpl")
require(maptools)
data("wrld_simpl")
install.packages("rgeos")
require(maptools)
data("wrld_simpl")
str(wrld_simpl)
summary(wrld_simpl)
coordinates(wrld_simpl)
bbox(wrld_simpl)
proj4string(wrld_simpl)
str(wrld_simpl@data)
str(wrld_simpl@polygons)
str(wrld_simpl@plotOrder)
str(wrld_simpl@bbox)
str(wrld_simpl@proj4string)
spplot(meuse.grid_SPixelDF["soil"]) # spplot
spplot(meuse.grid_SPixelDF["soil"], main="SpatialPixelsDataFrame spplot") # spplot
nigeria <- class(wrld_simpl[wrld_simpl$NAME=="Nigeria",])
nigeria
nigeria <- wrld_simpl[wrld_simpl$NAME=="Nigeria",]
class(nigeria)
plot(nigeria, col="red")
plot(nigeria, col="red", main = "Map of Nigeria.")
plot(nigeria, col="red", main = "Boundary Map of Nigeria.", border="white")
str(nigeria,max.level=3)
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)))
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)), main="Map of the world")
install.packages("rgeos")
require(rgeos)
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=topo.colors(9))
setwd("/var/www/example.com/public_html/Data-Science-All/Geostatistics and Geomarketing") # set working directory
require(spatstat) # alternative activate package
require(sp) # activate package
require(rgeos) #activate rgeos
library("dismo")
library("fields")
library("akimo")
library("spatstat")
library("tripack")
library("spatstat")
library("sp")
library("rgeos")
gwt <- read.csv("Groundwater_Temperature.csv", header = TRUE, col.names = c("Name", "X_Coordinate", "Y_Coordinate", "Surface", "Date", "Temperature"), colClasses = c("Name" = "character", "X_Coordinate" = "double", "Date" = "character"), numerals = c("no.loss"))
class(gwt) # get class of gw_test
str(gwt)
gwt_sub <- subset(gwt,subset=(Surface > 0)) # subsetting values of Surface variables > 0. Data now has 489 unlike the original of 492
gwt_sub <- gwt[gwt$Surface > 0,] # alternative subsetting values of Surface variables > 0
gwt_sub_xy <- cbind(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate) # X and Y coordinate coercion along column
gwt_sub.sp <- SpatialPoints(gwt_sub_xy) # create spatial points
summary(gwt_sub.sp)
bbox(gwt_sub.sp) #get bouding box
proj4string(gwt_sub.sp)
class(gwt_sub.sp) # confirm object class
str(gwt_sub.sp)
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) # check CRS projection
z <- gwt_sub$Surface #surface as third attribute, z
z <- data.frame(z) # assign z as dataFrame
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
View(gwt_sub.spdf)
gwt_sub.spdf
gwt_sub.spdf # print SpatialPointsDataFrame
# SPDF for temperature
w <- gwt_sub$Temperature #temperature as third column, w
w <- data.frame(w) #set w as dataFrame
w <- data.frame(w) #set w as dataFrame
gwt_sub.spdf2 <- SpatialPointsDataFrame(gwt_sub.sp, w) # defining SpatialPointsDataFrame for temperature
gwt_sub.spdf2 # print SpatialPointsDataFrame
summary(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate))
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="green", main="Delaunay Triangulation")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="red")
summary(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate))
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Voronoi Polygons")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="orange")
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Triangulation Mesh and Voronoi Polygons")
plot(tri.mesh(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"),col="green", add=TRUE)
points(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate, col="gray")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
summary(voronoi.spoly)
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=topo.colors(9))
#for temperature
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=rainbow(9))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=topo.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=terrain.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=terrain.colors(3))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=topo.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=heat.colors(9))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=terrain.colors(9))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=terrain.colors(9))
#for temperature
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=cm.colors(9))
install.packages("wesanderson")
require(wesanderson)
library("wesanderson")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=terrain.colors(5))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=terrain.colors(5))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=cm.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col=wes.palette(n=3, name="GrandBudapest"))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= wes_palette(n=3, name="GrandBudapest"))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= wes_palettes(n=3, name="GrandBudapest"))
require(wesanderson)
wesanderson::heatmap
wesanderson
?wesanderson
?wesanderson
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(9))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly, col=terrain.colors(5))
spplot(voronoi.spoly, "z")
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2, col= rainbow(9))
spplot(voronoi.spoly2, "w")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly, col=terrain.colors(5))
spplot(voronoi.spoly, "z")
?plot
help("plot")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly, col=heat.colors(9, s = 1, v = 1))
spplot(voronoi.spoly, "z")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly, col=heat.colors(9, s = 2, v = 2))
spplot(voronoi.spoly, "z")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(9, s = 2, v = 2))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(9))
require(graphics)
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(12))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(12))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(5))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(5))
