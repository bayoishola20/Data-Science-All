## 1a) Start search
help.start()
## 1b) Search for "hist" help.
help.search("hist")
install.packages("gstat") # install gstat package
library("gstat") # Activate gstat
vignette(package = "gstat") # get vignette for gstat
vignette
vignette(st, package = "gstat")
vignette(:st", package = "gstat")
vignette("st", package = "gstat")
vignette("intro_sp", package = "sp")
?runif
a <- runif(100) # 100 random numbers
a
min(a)
max(a)
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random integers between 0 & 100
b
b <- runif(1000, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
b <- runif(100, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
class(b)
typeof(b)
b <- runif(100, min=0L, max=100L) #1000 uniformly distributed random integers between 0 & 100
b
b <- sample(0:100, 1000)
b <- sample(0:100, 100)
b
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
b <- sample(0:100, 100)
p2 <- hist(b, col = "blue", border = "white")
b <- runif(1000, min=0, max=100) #1000 uniformly distributed random integers between 0 & 100
par(mfrow=c(1,2)) # to help with side-by-side comparison
p1 <- hist(a, col = "red", border = "white")
p2 <- hist(b, col = "blue", border = "white")
b
c <- seq(from = -100, to = 100)
c
plot(c**2) #plot(c^2) is also an alternative
plot(c**2) #plot(c^2) is also an alternative
plot(c**2, main = "Plot of c^2") #plot(c^2) is also an alternative
# 4b)
d <- seq(from = 0, to = 6, length.out = 100)
d
plot(d, sin(d)) #sinus plot
plot(d, sin(d), main = "Sinus plot of d") #sinus plot
# 4c)
e <- LETTERS #OR
e
# 4d)
f <- rep.int(1, 100)
f
# 5a)
x <- matrix(data = -99, nrow = 10, ncol = 10)
x
# 5b) 100 by 100 matrix consisting of uniformly distributed values
y <- matrix(data = runif(10000), nrow = 100, ncol = 100)
y
# 5c)
z <- y > 0.5
z
# 5d)
image(x)
image(x, title(main="Matrix x"))
image(x, title = "Matrix x")
# 5d)
image(x)
image(x, col = "green")
help(hist)
image(x, col = "green")
image(y, col = "orange")
# 5b) 100 by 100 matrix consisting of uniformly distributed values
y <- matrix(data = runif(10000), nrow = 100, ncol = 100)
image(y)
image(y, col = "orange")
help.start()
help.start()
range(a)
help(matrix)
help("array")
help(matrix)
data
diamonds
hist(diamonds$carat, diamonds$price)
hist(diamonds$carat, diamonds$x)
hist(diamonds$y, diamonds$x)
hist(diamonds$carat)
hist(diamonds$price)
hist(diamonds$price, col = "brown", border = "white")
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title="Histogram of price of diamonds")
hist(diamonds$price, col = "brown", border = "white", main = "Histogram of price of diamonds")
install.packages(c("geoR", "spatstat", "spatial", "tripack", "akima"))
library("sp") # activate spatial first
getClass("Spatial") # get "Spatial" classes
x <- runif(100, min = 4000000, max = 4010000) # intgers
y <- runif(100, min = 5205000,	max = 5205500) # integers
z <- runif(100, min = 500,	max = 600) # float
elevations <- data.frame(x,y,z) # DataFrame elevations
elevations
plot(elevations$x, elevations$y, pch=1, main = "Plot of XY coordinates", xlab = "x-coordinates", ylab = "y-coordinates", col = "blue", lwd = 1) # plots x and y of elevations as circles
hist(elevations$z, col = "gray", border = "white", main = "Histogram of z coordinates", xlab = "z-coordinates", labels = TRUE)
data("meuse") # load the meuse data from "sp" package
View(meuse)
meuse$zinc # get column zinc
mean(meuse$zinc) # get mean of zinc column
meuse[,5] # get the fifth column. [row,column]
median(meuse[,5]) # median of fifth column
meuse[30,] # get 30th row
meuse[30,] # get 30th row
c(meuse[30,]$x, meuse[30,]$y) # coordinates of 30th row
meuse[50,]$lead # lead value of the 50th row
class(meuse)
str(meuse)
summary(meuse) # main	statistical	parametersfor	every	column
summary(meuse) # main	statistical	parametersfor	every	column
length(meuse) # this means that there are 14 variables
length(meuse$zinc) # this means that there are 155 observations
class(meuse$cadmium) # class type of cadmium: numeric data of float type
names(meuse) # column	names	of the	meuse	dataset
class(meuse$soil) # class type of cadmium: factor data with three levels (1, 2 and 3)
names(meuse) # column	names	of the	meuse	dataset
meuse.spdf <- meuse # conversion of meuse to SpatialPointsDataFrame
View(meuse.spdf)
coordinates(meuse.spdf) <- c("x", "y") # x,y coordinates concantenation & becomes a class
View(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
class(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
meuse.spdf
meuse.spdf@coords
meuse.spdf@proj4string
plot(meuse.spdf, main = "SpatialPointsDataFrame")
summary(meuse.spdf) # a statistical summary
bbox(meuse.spdf) # find bounding box coordinates
proj4string(meuse.spdf) # check projection system
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
data("meuse.grid") # load "meuse.grid" data from package "sp"
class(meuse.grid)
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
meuse.grid_xy = cbind(meuse.grid$x, meuse.grid$y) # promotion to coordinates
meuse.grid_SPoints <- SpatialPoints(meuse.grid_xy) # promotion to SpatialPoints
soil <- meuse.grid$soil #selection of soil attributes to create SpatialPointsDataFrame
soil <- data.frame(soil) # conversion of soil datatype from factor to data.frame
meuse.grid_SPointDF <- SpatialPointsDataFrame(meuse.grid_SPoints, soil) # promotion to SpatialPointsDataFrame
View(soil)
class(meuse.grid_SPointDF) # confirm object class as "SpatialPointsDataFrame"
# creation of "SpatialPixelsDataFrame"
meuse.grid_SPixelDF <- SpatialPixelsDataFrame(coordinates(meuse.grid_SPointDF), data = meuse.grid) # promotion of SpatialPointsDataFrame
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
plot(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (plot)", col = rainbow(12)) # plot
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
spplot(meuse.grid_SPixelDF) # spplot
data(wrld_simpl)
data("wrld_simpl")
require(maptools)
data("wrld_simpl")
install.packages("rgeos")
require(maptools)
data("wrld_simpl")
str(wrld_simpl)
summary(wrld_simpl)
coordinates(wrld_simpl)
bbox(wrld_simpl)
proj4string(wrld_simpl)
str(wrld_simpl@data)
str(wrld_simpl@polygons)
str(wrld_simpl@plotOrder)
str(wrld_simpl@bbox)
str(wrld_simpl@proj4string)
spplot(meuse.grid_SPixelDF["soil"]) # spplot
spplot(meuse.grid_SPixelDF["soil"], main="SpatialPixelsDataFrame spplot") # spplot
nigeria <- class(wrld_simpl[wrld_simpl$NAME=="Nigeria",])
nigeria
nigeria <- wrld_simpl[wrld_simpl$NAME=="Nigeria",]
class(nigeria)
plot(nigeria, col="red")
plot(nigeria, col="red", main = "Map of Nigeria.")
plot(nigeria, col="red", main = "Boundary Map of Nigeria.", border="white")
str(nigeria,max.level=3)
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)))
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)), main="Map of the world")
setwd("/var/www/example.com/public_html/Data-Science-All/Geostatistics and Geomarketing") # set working directory
library("dismo")
library("fields")
library("akima")
library("spatstat")
library("tripack")
library("sp")
library("rgeos")
library("spatial")
library("fields")
library("gstat")
library("RColorBrewer")
gwt <- read.csv("Groundwater_Temperature.csv", header = TRUE, col.names = c("Name", "X_Coordinate", "Y_Coordinate", "Surface", "Date", "Temperature"), colClasses = c("Name" = "character", "X_Coordinate" = "double", "Date" = "character"), numerals = c("no.loss"))
gwt_sub <- subset(gwt,subset=(Surface > 0)) # subsetting values of Surface variables > 0. Data now has 489 unlike the original of 492
gwt_sub_xy <- cbind(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate) # X and Y coordinate coercion along column
gwt_sub.sp <- SpatialPoints(gwt_sub_xy) # create spatial points
summary(gwt_sub.sp)
bbox(gwt_sub.sp) #get bouding box
proj4string(gwt_sub.sp)
class(gwt_sub.sp) # confirm object class
str(gwt_sub.sp)
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) # check CRS projection
z <- gwt_sub$Surface #surface as third attribute, z
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
# SPDF for temperature
w <- gwt_sub$Temperature #temperature as third attribute, w
gwt_sub.spdf2 <- SpatialPointsDataFrame(gwt_sub.sp, w) # defining SpatialPointsDataFrame for temperature
gwt_sub.spdf2 # print SpatialPointsDataFrame
summary(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate))
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Triangulation mesh based on Delaunay Method", col="blue")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="red")
summary(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate))
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Voronoi Polygons")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="orange")
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Triangulation Mesh and Voronoi Polygons")
plot(tri.mesh(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"),col="green", add=TRUE)
points(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate, col="gray")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly, main="Groundwater Voronoi Polygons")
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
str(gwt_sub)
str(gwt_sub.sp)
gwt <- read.csv("Groundwater_Temperature.csv", header = TRUE, col.names = c("Name", "X_Coordinate", "Y_Coordinate", "Surface", "Date", "Temperature"), colClasses = c("Name" = "character", "X_Coordinate" = "double", "Date" = "character"), numerals = c("no.loss"))
class(gwt) # get class of gw_test
str(gwt)
gwt_sub <- subset(gwt,subset=(Surface > 0)) # subsetting values of Surface variables > 0. Data now has 489 unlike the original of 492
gwt_sub <- gwt[gwt$Surface > 0,] # alternative subsetting values of Surface variables > 0
gwt_sub_xy <- cbind(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate) # X and Y coordinate coercion along column
summary(gwt_sub.sp)
proj4string(gwt_sub.sp)
class(gwt_sub.sp) # confirm object class
str(gwt_sub.sp)
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) # check CRS projection
z <- gwt_sub$Surface #surface as third attribute, z
z <- data.frame(z) # assign z as dataFrame
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
gwt_sub.spdf # print SpatialPointsDataFrame
# SPDF for temperature
w <- gwt_sub$Temperature #temperature as third attribute, w
w <- data.frame(w) # assign w as dataFrame
gwt_sub.spdf2 <- SpatialPointsDataFrame(gwt_sub.sp, w) # defining SpatialPointsDataFrame for temperature
gwt_sub.spdf2 # print SpatialPointsDataFrame
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
A
gwtCH <- convexhull.xy(coords(Xgwt))
#for surface
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi(gwt_sub.spdf))
spplot(voronoi(gwt_sub.spdf), "z", col.regions= brewer.pal(n = 7, name = "Accent"))
plot(gwtCH,add=T, border="red")
plot(gwtCH,add=T, border="red")
plot(gwtCH,add=T, border="red")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi(gwt_sub.spdf))
spplot(voronoi(gwt_sub.spdf), "z", col.regions= brewer.pal(n = 7, name = "Accent"))
plot(gwtCH,add=T, border="red")
voronoi.spoly <- voronoi(gwt_sub.spdf)
spplot(voronoi(gwt_sub.spdf), "z", col.regions= brewer.pal(n = 7, name = "Accent"))
plot(gwtCH,add=T, border="red")
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi(gwt_sub.spdf2))
spplot(voronoi(gwt_sub.spdf2), "w", col.regions= brewer.pal(n = 7, name = "OrRd"))
plot(gwtCH,add=T, border="red")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi(gwt_sub.spdf))
spplot(voronoi(gwt_sub.spdf), "z", col.regions= brewer.pal(n = 7, name = "Accent"))
plot(gwtCH,add=T, border="red")
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$Y_Coordinate)), c(min(gwt_sub$X_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
marks = gwt_sub$Temperature
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
marks = gwt_sub$Temperature
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
marks = gwt_sub$Surface
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
marks = gwt_sub$Temperature # get temperature values
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate)))) # marks needs to be defined explicitly here
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object
require(sp)
marks = gwt_sub$Surface
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
require(spatstat)
par(mfrow=c(2,2)) # for comparison
marks = gwt_sub$Surface
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks = gwt_sub$Surface, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
idw.out <- idw(Xppp) # create IDW with input as ppp-object @ pow = 2
detach("package:gstat", unload=TRUE)
marks = gwt_sub$Surface
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks = gwt_sub$Surface, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
par(mfrow=c(2,2)) # for comparison
Xppp <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks = gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xppp, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
idw.out <- idw(Xgwt, power=3) # create IDW with input as ppp-object @ pow = 3
plot(idw.out, main="Inverse Distance Weight (pow=3)") #plot
idw.out <- idw(Xgwt, power=4) # create IDW with input as ppp-object @ pow = 4
plot(idw.out, main="Inverse Distance Weight (pow=4)") #plot
idw.out <- idw(Xgwt, power=5) # create IDW with input as ppp-object @ pow = 5
plot(idw.out, main="Inverse Distance Weight (pow=5)") #plot
par(mfrow=c(2,2)) # for comparison
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks = gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
idw.out <- idw(Xgwt, power=3) # create IDW with input as ppp-object @ pow = 3
plot(idw.out, main="Inverse Distance Weight (pow=3)") #plot
idw.out <- idw(Xgwt, power=4) # create IDW with input as ppp-object @ pow = 4
plot(idw.out, main="Inverse Distance Weight (pow=4)") #plot
idw.out <- idw(Xgwt, power=5) # create IDW with input as ppp-object @ pow = 5
plot(idw.out, main="Inverse Distance Weight (pow=5)") #plot
par(mfrow=c(2,2)) # for comparison
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks = gwt_sub$Surface, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
idw.out <- idw(Xgwt, power=3) # create IDW with input as ppp-object @ pow = 3
plot(idw.out, main="Inverse Distance Weight (pow=3)") #plot
idw.out <- idw(Xgwt, power=4) # create IDW with input as ppp-object @ pow = 4
plot(idw.out, main="Inverse Distance Weight (pow=4)") #plot
idw.out <- idw(Xgwt, power=5) # create IDW with input as ppp-object @ pow = 5
plot(idw.out, main="Inverse Distance Weight (pow=5)") #plot
#Least Square Method from 1 to 4th power
gwt_sub1 <- surf.ls(1, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub2 <- surf.ls(2, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub3 <- surf.ls(3, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub4 <- surf.ls(4, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
# Difference between the Predictions and the Observed Values
z1<-predict(gwt_sub1, gwt_sub1$x, gwt_sub1$y)
delta1=gwt_sub$Surface-z1
z2<-predict(gwt_sub2, gwt_sub2$x, gwt_sub2$y)
delta2=gwt_sub$Surface-z2
z3<-predict(gwt_sub3, gwt_sub3$x, gwt_sub3$y)
delta3=gwt_sub$Surface-z3
z4 <- predict(gwt_sub4, gwt_sub4$x, gwt_sub4$y)
delta4=gwt_sub$Surface-z4
# RMSE  comparison
sqrt(sum(delta1**2/length(delta1)))
sqrt(sum(delta2**2/length(delta2)))
sqrt(sum(delta3**2/length(delta3)))
sqrt(sum(delta4**2/length(delta4)))
par(mfrow = c(2, 2))
hist(delta1, main="Hist. of Delta at Pow=1", col=topo.colors(6), border = "white")
hist(delta2, main="Hist. of Delta at Pow=2", col=topo.colors(6), border = "white")
hist(delta3, main="Hist. of Delta at Pow=3", col=topo.colors(6), border = "white")
hist(delta4, main="Hist. of Delta at Pow=4", col=topo.colors(6), border = "white")
#=== For Temperature
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Temperature)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white', xlab="x-coordinates", ylab="y-coordinates")
#=== For Surface
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Surface)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white')
#=== For Temperature
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Temperature)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white', xlab="x-coordinates", ylab="y-coordinates")
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Surface)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white')
plotMap(gwtCH, col="moccasin", projection="UTM")
plot(gwtCH, col="moccasin", projection="UTM")
plot(gwtCH, col="moccasin", projection="UTM")
plot(gwtCH, col="gray", projection="UTM")
gwtCH$xrange
gwtCH$yrange
p1 = cbind(gwtCH$X,gwtCH$Y)
p1
p1 = cbind(gwtCH$xrange,gwtCH$yrange)
p1
class(p1)
sp1 <- Polygons(list(Polygon(p1)),"p1")
gwtCH$bdry
p1 = cbind(gwtCH$bdry$x,gwtCH$bdry$y)
p1
p1
gwtCH
gwtCH$bdry
crop(voronoi.spoly, gwtCH)
crop(voronoi.spoly, gwtCH$bdry)
gwtCH <- convexhull.xy(coords(Xgwt))
gwtCH
require(PBSmapping)
install.packages("PBSmapping")
library("PBSmapping", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
convexHull <- calcConvexHull(gwt_sub.sp)
gwt_subXY<-data.frame(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate)
names(gwt_subXY)<- c("X","Y")
summary(gwt_subXY)
convexHull <- calcConvexHull(gwt_subXY)
class(convexHull)
convexHull
plot(convexHull, col="gray" border="blue")
plot(convexHull, col="gray", border="blue")
plot(convexHull, col="gray", border="blue")
plot(convexHull, col="gray")
plotMap(convexHull, col="gray")
class(convexHull)
plot(convexHull, col="gray")
plotMap(convexHull, col="gray")
plotMap(convexHull, col="gray", border = "white")
plotMap(convexHull, col="gray", border = "red")
p1 = cbind(convexHull$X, convexHull$Y)
class(p1)
sp1 = Polygons(list(Polygon(p1)),"p1")
sp = SpatialPolygons(list(sp1))
proj4string(sp)
proj4string(sp) <- crs
summary(sp)
proj4string(sp) <-CRS("+init=epsg:31468")
summary(sp)
voronoi.spolyClip <- crop(voronoi.spoly, sp)
spplot(voronoi(gwt_sub.spdf2), "w", col.regions= brewer.pal(n = 7, name = "OrRd"))
voronoi.spolyClip <- crop(voronoi.spoly, sp)
spplot(voronoi.spolyClip, "w", col.regions= brewer.pal(n = 7, name = "OrRd"))
spplot(voronoi.spolyClip, "Temperature", col.regions= brewer.pal(n = 7, name = "OrRd"))
voronoi.spolyClip
voronoi.spolyClip <- crop(voronoi.spoly, sp)
spplot(voronoi.spolyClip, "z", col.regions= brewer.pal(n = 7, name = "OrRd"))
voronoi.spolyClip <- crop(voronoi.spoly, sp)
spplot(voronoi.spolyClip, "z", col.regions= brewer.pal(n = 7, name = "Accent"))
voronoi.spolyClip <- crop(voronoi.spoly, sp)
spplot(voronoi.spolyClip, "z", col.regions= brewer.pal(n = 7, name = "Accent"))
voronoi.spolyClip <- crop(voronoi.spoly2, sp)
spplot(voronoi.spolyClip, "z", col.regions= brewer.pal(n = 7, name = "OrRd"))
# clip Temperature
voronoi.spolyClip2 <- crop(voronoi.spoly2, sp)
spplot(voronoi.spolyClip2, "z", col.regions= brewer.pal(n = 7, name = "OrRd"))
# clip Temperature
voronoi.spolyClip2 <- crop(voronoi.spoly2, sp)
spplot(voronoi.spolyClip2, "w", col.regions= brewer.pal(n = 7, name = "OrRd"))
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, main="Linear Interpolation Surface, Mesh and Points", asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 1, xlab = "x-coordinates", ylab = "y-coordinates")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", add =TRUE, lty="dotted")
delta1=gwt_sub$Surface-z1
delta1
delta2
