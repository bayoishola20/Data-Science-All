hist(diamonds$y, diamonds$x)
hist(diamonds$carat)
hist(diamonds$price)
hist(diamonds$price, col = "brown", border = "white")
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title(main = "Histogram of price of diamonds"))
hist(diamonds$price, col = "brown", border = "white", title="Histogram of price of diamonds")
hist(diamonds$price, col = "brown", border = "white", main = "Histogram of price of diamonds")
install.packages(c("geoR", "spatstat", "spatial", "tripack", "akima"))
library("sp") # activate spatial first
getClass("Spatial") # get "Spatial" classes
x <- runif(100, min = 4000000, max = 4010000) # intgers
y <- runif(100, min = 5205000,	max = 5205500) # integers
z <- runif(100, min = 500,	max = 600) # float
elevations <- data.frame(x,y,z) # DataFrame elevations
elevations
plot(elevations$x, elevations$y, pch=1, main = "Plot of XY coordinates", xlab = "x-coordinates", ylab = "y-coordinates", col = "blue", lwd = 1) # plots x and y of elevations as circles
hist(elevations$z, col = "gray", border = "white", main = "Histogram of z coordinates", xlab = "z-coordinates", labels = TRUE)
data("meuse") # load the meuse data from "sp" package
View(meuse)
meuse$zinc # get column zinc
mean(meuse$zinc) # get mean of zinc column
meuse[,5] # get the fifth column. [row,column]
median(meuse[,5]) # median of fifth column
meuse[30,] # get 30th row
meuse[30,] # get 30th row
c(meuse[30,]$x, meuse[30,]$y) # coordinates of 30th row
meuse[50,]$lead # lead value of the 50th row
class(meuse)
str(meuse)
summary(meuse) # main	statistical	parametersfor	every	column
summary(meuse) # main	statistical	parametersfor	every	column
length(meuse) # this means that there are 14 variables
length(meuse$zinc) # this means that there are 155 observations
class(meuse$cadmium) # class type of cadmium: numeric data of float type
names(meuse) # column	names	of the	meuse	dataset
class(meuse$soil) # class type of cadmium: factor data with three levels (1, 2 and 3)
names(meuse) # column	names	of the	meuse	dataset
meuse.spdf <- meuse # conversion of meuse to SpatialPointsDataFrame
View(meuse.spdf)
coordinates(meuse.spdf) <- c("x", "y") # x,y coordinates concantenation & becomes a class
View(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
class(meuse.spdf)
proj4string(meuse.spdf) <- CRS("+init=epsg:28992")
meuse.spdf
meuse.spdf@coords
meuse.spdf@proj4string
plot(meuse.spdf, main = "SpatialPointsDataFrame")
summary(meuse.spdf) # a statistical summary
bbox(meuse.spdf) # find bounding box coordinates
proj4string(meuse.spdf) # check projection system
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
data("meuse.grid") # load "meuse.grid" data from package "sp"
class(meuse.grid)
# creation of "SpatialPointsDataFrame"
meuse.grid_SPointDF <- meuse.grid # assigning as variable to keep main data untouched
meuse.grid_xy = cbind(meuse.grid$x, meuse.grid$y) # promotion to coordinates
meuse.grid_SPoints <- SpatialPoints(meuse.grid_xy) # promotion to SpatialPoints
soil <- meuse.grid$soil #selection of soil attributes to create SpatialPointsDataFrame
soil <- data.frame(soil) # conversion of soil datatype from factor to data.frame
meuse.grid_SPointDF <- SpatialPointsDataFrame(meuse.grid_SPoints, soil) # promotion to SpatialPointsDataFrame
View(soil)
class(meuse.grid_SPointDF) # confirm object class as "SpatialPointsDataFrame"
# creation of "SpatialPixelsDataFrame"
meuse.grid_SPixelDF <- SpatialPixelsDataFrame(coordinates(meuse.grid_SPointDF), data = meuse.grid) # promotion of SpatialPointsDataFrame
class(meuse.grid_SPixelDF) # confirm object class as "SpatialPixelsDataFrame"
plot(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (plot)", col = rainbow(12)) # plot
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
image(meuse.grid_SPixelDF, main = "meuse.grid SpatialPixelsDataFrame (image)", col = topo.colors(15)) # image
spplot(meuse.grid_SPixelDF) # spplot
data(wrld_simpl)
data("wrld_simpl")
require(maptools)
data("wrld_simpl")
install.packages("rgeos")
require(maptools)
data("wrld_simpl")
str(wrld_simpl)
summary(wrld_simpl)
coordinates(wrld_simpl)
bbox(wrld_simpl)
proj4string(wrld_simpl)
str(wrld_simpl@data)
str(wrld_simpl@polygons)
str(wrld_simpl@plotOrder)
str(wrld_simpl@bbox)
str(wrld_simpl@proj4string)
spplot(meuse.grid_SPixelDF["soil"]) # spplot
spplot(meuse.grid_SPixelDF["soil"], main="SpatialPixelsDataFrame spplot") # spplot
nigeria <- class(wrld_simpl[wrld_simpl$NAME=="Nigeria",])
nigeria
nigeria <- wrld_simpl[wrld_simpl$NAME=="Nigeria",]
class(nigeria)
plot(nigeria, col="red")
plot(nigeria, col="red", main = "Map of Nigeria.")
plot(nigeria, col="red", main = "Boundary Map of Nigeria.", border="white")
str(nigeria,max.level=3)
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)))
# 3d) Plot	the	whole	“wrld_simpl”	dataset	with	spplot	using	the	attributes	“NAME”,	“REGION”	and	“POP2005”.	Try	different	color	palettes,	e.g.	rainbow,	topo,	bpy,	...
spplot(wrld_simpl, "NAME", colorkey=FALSE, col.regions = rainbow(length(wrld_simpl$REGION)), main="Map of the world")
list.files()
setwd("/var/www/example.com/public_html/Data-Science-All/Geostatistics and Geomarketing") # set working directory
library("dismo")
library("fields")
library("akimo")
library("spatstat")
library("tripack")
library("spatstat")
library("sp")
library("rgeos")
gwt <- read.csv("Groundwater_Temperature.csv", header = TRUE, col.names = c("Name", "X_Coordinate", "Y_Coordinate", "Surface", "Date", "Temperature"), colClasses = c("Name" = "character", "X_Coordinate" = "double", "Date" = "character"), numerals = c("no.loss"))
class(gwt) # get class of gw_test
str(gwt)
gwt_sub <- subset(gwt,subset=(Surface > 0)) # subsetting values of Surface variables > 0. Data now has 489 unlike the original of 492
gwt_sub <- gwt[gwt$Surface > 0,] # alternative subsetting values of Surface variables > 0
gwt_sub_xy <- cbind(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate) # X and Y coordinate coercion along column
gwt_sub.sp <- SpatialPoints(gwt_sub_xy) # create spatial points
summary(gwt_sub.sp)
bbox(gwt_sub.sp) #get bouding box
proj4string(gwt_sub.sp)
class(gwt_sub.sp) # confirm object class
str(gwt_sub.sp)
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) # check CRS projection
z <- gwt_sub$Surface #surface as third attribute, z
z <- data.frame(z) # assign z as dataFrame
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
gwt_sub.spdf # print SpatialPointsDataFrame
# SPDF for temperature
w <- gwt_sub$Temperature #temperature as third attribute, w
w <- data.frame(w) # assign w as dataFrame
gwt_sub.spdf2 <- SpatialPointsDataFrame(gwt_sub.sp, w) # defining SpatialPointsDataFrame for temperature
gwt_sub.spdf2 # print SpatialPointsDataFrame
summary(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate))
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="green", main="Delaunay Triangulation")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", main="Delaunay Triangulation")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="red")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", main="Delaunay Triangulation")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="red")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Delaunay Triangulation", col="blue")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="red")
summary(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate))
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Voronoi Polygons")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="orange")
summary(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate))
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Voronoi Polygons")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, col="orange")
plot(voronoi.mosaic(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"), col="blue", main="Triangulation Mesh and Voronoi Polygons")
plot(tri.mesh(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,duplicate="remove"),col="green", add=TRUE)
points(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate, col="gray")
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
summary(voronoi.spoly)
?voronoi
#for surface
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(5))
?rainbow
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= rainbow(5))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= topo.colors(9))
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(9))
#for surface
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(5))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi.spoly2)
spplot(voronoi.spoly2, "w", col= topo.colors(9))
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi(gwt_sub.spdf2))
spplot(voronoi(gwt_sub.spdf2), "w", col= topo.colors(5))
Xmeuse<-ppp(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)),c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
Xgwt<-ppp(gwt_sub$X_Coordinate,gwt_sub$Y_Coordinate,window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)),c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
A
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
A
plot(Xgwt)
plot(Xgwt)
plot(bounding.box.xy(coords(Xgwt)),add=T, border="red")
plot(bounding.box.xy(coords(gwt_sub)),add=T, border="red")
plot(bounding.box.xy(coords(gwt_sub.spdf)),add=T, border="red")
plot(convex.hull.xy(coords(gwt_sub)),add=T, border="red")
plot(convexhull.xy(coords(gwt_sub)),add=T, border="red")
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
op <- par(mfrow = c(1, 3))
data(cells)
plot(cells)
plot(convexhull.xy(coords(cells)),add=T, border="red")
data(japanesepines)
plot(japanesepines)
plot(convexhull.xy(coords(japanesepines)),add=T, border="red")
data(redwood)
plot(redwood)
plot(convexhull.xy(coords(redwood)),add=T, border="red")
par(op)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
data(gwt_sub)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
plot(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
data(gwt_sub)
point(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot()
plot()
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(5))
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
Xgwt <- ppp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, marks=gwt_sub$Temperature, window=owin(c(min(gwt_sub$X_Coordinate),max(gwt_sub$X_Coordinate)), c(min(gwt_sub$Y_Coordinate),max(gwt_sub$Y_Coordinate))))
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
A=area.owin(bounding.box.xy(coords(Xgwt)))
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(convexhull.xy(coords(Xgwt)),add=T, border="red")
gwtCH <- convexhull.xy(coords(Xgwt))
plot(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate)
plot(gwtCH,add=T, border="red")
gwtCH
?convex.hull
voronoi.spoly <- voronoi(gwt_sub.spdf)
plot(voronoi.spoly)
spplot(voronoi.spoly, "z", col=heat.colors(5))
plot(gwtCH,add=T, border="red")
voronoi.spoly2 <- voronoi(gwt_sub.spdf2)
plot(voronoi(gwt_sub.spdf2))
spplot(voronoi(gwt_sub.spdf2), "w", col= topo.colors(5))
plot(gwtCH,add=T, border="red")
library("akimo")
library("akima")
require(akima)
help("~")
plot(gwt_sub$Y_Coordinate ~ gwt_sub$X_Coordinate, data = gwt_sub, main = "Linear Interpolation surface")
with(gwt_sub, text(x, y, formatC(z,dig=2), adj = -0.1))
plot(gwt_sub$Y_Coordinate ~ gwt_sub$X_Coordinate, data = gwt_sub, main = "Linear Interpolation surface")
with(gwt_sub, text(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, formatC(z,dig=2), adj = -0.1))
plot(gwt_sub$Y_Coordinate ~ gwt_sub$X_Coordinate, data = gwt_sub, main = "Linear Interpolation surface")
with(gwt_sub, text(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, formatC(gwt_sub$Surface,dig=2), adj = -0.1))
akima.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (akima.li, asp=1)
contour(akima.li, col='blue', add=TRUE)
points (akima, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points (gwt_sub, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points (akima, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points (gwt_sub, pch = 3)
points(gwt_sub, pch = 3)
points(gwt_sub.sp, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Delaunay Triangulation", col="blue")
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Delaunay Triangulation", col="blue")
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
image (gwt_sub.li, asp=1)
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Delaunay Triangulation", col="blue")
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), main="Linear Interpolation Surface, Mesh and Points", col="blue", add =TRUE, lty="dotted")
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, main="Linear Interpolation Surface, Mesh and Points", asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3)
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", add =TRUE, lty="dotted")
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, main="Linear Interpolation Surface, Mesh and Points", asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3,xlab = "x-coordinates", ylab = "y-coordinates")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", add =TRUE, lty="dotted")
gwt_sub.li <- interp(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, gwt_sub$Surface)
#Plotting the results
image (gwt_sub.li, main="Linear Interpolation Surface, Mesh and Points", asp=1)
contour(gwt_sub.li, col='blue', add=TRUE)
points(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate, pch = 3,xlab = "x-coordinates", ylab = "y-coordinates")
plot(tri.mesh(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate), col="blue", add =TRUE, lty="dotted")
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object
plot(idw.out, main="Inverse Distance Weight") #plot
par(mfrow=c(2,2))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
idw.out <- idw(Xgwt, power=3) # create IDW with input as ppp-object @ pow = 3
plot(idw.out, main="Inverse Distance Weight (pow=3)") #plot
idw.out <- idw(Xgwt, power=4) # create IDW with input as ppp-object @ pow = 4
plot(idw.out, main="Inverse Distance Weight (pow=4)") #plot
par(mfrow=c(2,2))
idw.out <- idw(Xgwt, power=2) # create IDW with input as ppp-object @ pow = 2
plot(idw.out, main="Inverse Distance Weight (pow=2)") #plot
idw.out <- idw(Xgwt, power=3) # create IDW with input as ppp-object @ pow = 3
plot(idw.out, main="Inverse Distance Weight (pow=3)") #plot
idw.out <- idw(Xgwt, power=4) # create IDW with input as ppp-object @ pow = 4
plot(idw.out, main="Inverse Distance Weight (pow=4)") #plot
idw.out <- idw(Xgwt, power=5) # create IDW with input as ppp-object @ pow = 5
plot(idw.out, main="Inverse Distance Weight (pow=5)") #plot
require(spatial)
gwt_sub1 <- surf.ls(1, gwt_sub)
gwt_sub1 <- surf.ls(1, gwt_sub.sp)
gwt_sub1 <- surf.ls(1, gwt_sub.spdf)
data(topo)
data("topo")
data
data()
?surf.ls
str(gwt_sub.spdf)
gwt_sub1 <- surf.ls(1, gwt_sub.spdf@data)
gwt_sub1 <- surf.ls(1, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub2 <- surf.ls(2, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub3 <- surf.ls(3, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
gwt_sub4 <- surf.ls(4, x = gwt_sub$X_Coordinate, y = gwt_sub$Y_Coordinate, z = gwt_sub$Surface)
z1<-predict(gwt_sub1, gwt_sub1$x, gwt_sub1$y)
delta1=gwt_sub$Surface-z1
sqrt(sum(delta1**2/length(delta1)))
z2<-predict(gwt_sub2, gwt_sub2$x, gwt_sub2$y)
delta2=gwt_sub$Surface-z2
z3<-predict(gwt_sub3, gwt_sub3$x, gwt_sub3$y)
delta3=gwt_sub$Surface-z3
z1<-predict(gwt_sub1, gwt_sub1$x, gwt_sub1$y)
delta1=gwt_sub$Surface-z1
z2<-predict(gwt_sub2, gwt_sub2$x, gwt_sub2$y)
delta2=gwt_sub$Surface-z2
z3<-predict(gwt_sub3, gwt_sub3$x, gwt_sub3$y)
delta3=gwt_sub$Surface-z3
z4 <- predict(gwt_sub4, gwt_sub4$x, gwt_sub4$y)
delta4=gwt_sub$Surface-z4
sqrt(sum(delta1**2/length(delta1)))
sqrt(sum(delta2**2/length(delta2)))
sqrt(sum(delta3**2/length(delta3)))
sqrt(sum(delta4**2/length(delta4)))
par(mfrow = c(2, 2))
hist(delta1)
hist(delta2)
hist(delta3)
hist(delta4)
par(mfrow = c(2, 2))
hist(delta1, main="delta")
hist(delta2)
hist(delta3)
hist(delta4)
par(mfrow = c(2, 2))
hist(delta1, main="Hist. of Delta at Pow=1")
hist(delta2, main="Hist. of Delta at Pow=2")
hist(delta3, main="Hist. of Delta at Pow=3")
hist(delta4, main="Hist. of Delta at Pow=4")
par(mfrow = c(2, 2))
hist(delta1, main="Hist. of Delta at Pow=1", col=topo.colors(6))
hist(delta2, main="Hist. of Delta at Pow=2")
hist(delta3, main="Hist. of Delta at Pow=3")
hist(delta4, main="Hist. of Delta at Pow=4")
par(mfrow = c(2, 2))
hist(delta1, main="Hist. of Delta at Pow=1", col=topo.colors(6))
hist(delta2, main="Hist. of Delta at Pow=2", col=topo.colors(6))
hist(delta3, main="Hist. of Delta at Pow=3", col=topo.colors(6))
hist(delta4, main="Hist. of Delta at Pow=4", col=topo.colors(6))
par(mfrow = c(2, 2))
hist(delta1, main="Hist. of Delta at Pow=1", col=topo.colors(6), border = "white")
hist(delta2, main="Hist. of Delta at Pow=2", col=topo.colors(6), border = "white")
hist(delta3, main="Hist. of Delta at Pow=3", col=topo.colors(6), border = "white")
hist(delta4, main="Hist. of Delta at Pow=4", col=topo.colors(6), border = "white")
?fields
require(fields)
library("fields")
library("gstat")
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Surface)
gwt_sub_sp<-gwt_sub
coordinates(gwt_sub_sp) <- ~x+y
gwt_sub_sp<-gwt_sub
coordinates(gwt_sub_sp) <- ~X_Coordinates+Y_Coordinates
gwt_sub_sp<-gwt_sub
coordinates(gwt_sub_sp) <- ~x+y
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Surface)
par(mfrow = c(1, 2))
#Plot the surface object
surface(meuse_spline)
class(meuse_spline)
points(meuse_sp)
#Plot the predict.surface object
meuse_spline_img<-predictSurface(meuse_spline)
class(meuse_spline_img)
image(meuse_spline_img)
contour(meuse_spline_img,add=T)
points(meuse_sp,col='white')
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(meuse_sp)
points(gwt_sub_sp)
points(gwt_sub.sp)
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Surface)
par(mfrow = c(1, 2))
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt.sp,col='white')
points(gwt_sp,col='white')
points(gwt_sub.sp,col='white')
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Temperature)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white')
gwt_spline<-Tps(coordinates(gwt_sub.sp), gwt_sub$Temperature)
par(mfrow = c(1, 2)) # for side-by-side comparison
#Plot the surface object
surface(gwt_spline)
class(gwt_spline)
points(gwt_sub.sp)
#Plot the predict.surface object
gwt_spline_img<-predictSurface(gwt_spline)
class(gwt_spline_img)
image(gwt_spline_img)
contour(gwt_spline_img,add=T)
points(gwt_sub.sp,col='white', xlab="x-coordinates", ylab="y-coordinates")
gwt_sub_xy <- cbind(gwt_sub$X_Coordinate, gwt_sub$Y_Coordinate) # X and Y coordinate coercion along column
gwt_sub.sp <- SpatialPoints(gwt_sub_xy) # create spatial points
summary(gwt_sub.sp)
bbox(gwt_sub.sp) #get bouding box
proj4string(gwt_sub.sp)
class(gwt_sub.sp) # confirm object class
str(gwt_sub.sp)
proj4string(gwt_sub.sp) <- CRS("+init=epsg:31468") # http://spatialreference.org/ref/epsg/31468/
proj4string(gwt_sub.sp) # check CRS projection
# SPDF for Surface
z <- gwt_sub$Surface #surface as third attribute, z
z <- data.frame(z) # assign z as dataFrame
gwt_sub.spdf <- SpatialPointsDataFrame(gwt_sub.sp, z) # defining SpatialPointsDataFrame
gwt_sub.spdf # print SpatialPointsDataFrame
# SPDF for temperature
w <- gwt_sub$Temperature #temperature as third attribute, w
w <- data.frame(w) # assign w as dataFrame
gwt_sub.spdf2 <- SpatialPointsDataFrame(gwt_sub.sp, w) # defining SpatialPointsDataFrame for temperature
gwt_sub.spdf2 # print SpatialPointsDataFrame
